{
  "reactApp": {
    "tailwindAppJsFileCode": [
      "",
      "function App() {",
      "  return (",
      "    <div className='App'>",
      "    <h1 className='text-3xl font-bold underline animate-bounce hover:bg-red-500'>",
      "      Hello world!",
      "    </h1>",
      "    </div>",
      "  );",
      "}",
      "",
      "export default App;"
    ],
    "indexFileCode": [
      "import React from 'react';",
      "import { createRoot } from 'react-dom/client';",
      "import { Provider } from 'react-redux';",
      "import { store } from './app/store';",
      "import App from './App';",
      "import reportWebVitals from './reportWebVitals';",
      "import './index.css';",
      "import { BrowserRouter} from 'react-router-dom';",
      "",
      "const container = document.getElementById('root');",
      "const root = createRoot(container);",
      "",
      "root.render(",
      "  <React.StrictMode>",
      "   <BrowserRouter>",
      "    <Provider store={store}>",
      "      <App />",
      "    </Provider>",
      "   </BrowserRouter>  ",
      "  </React.StrictMode>",
      ");",
      "",
      "// If you want to start measuring performance in your app, pass a function",
      "// to log results (for example: reportWebVitals(console.log))",
      "// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals",
      "reportWebVitals();",
      ""
    ],
    "routerFileCode": [
      "// eslint-disable-next-line",
      "import { Route, Routes, BrowserRouter, Switch, Navigate } from 'react-router-dom';",
      "import React from 'react';",
      "// import LoginUser from '../components/LoginUser' //importing the LoginUser component",
      "",
      "//import {useState, useEffect,useRef} from 'react'",
      "//import Routes from './components/Routes' //importing the Routes component",
      "const RoutesLink = (props)=>{",
      "",
      "    // get token from localstorage",
      "   ",
      "    // if token present return true",
      "    // if admin present return true",
      "    // console.log(isAdmin, 'isAuthenticated');",
      "",
      "",
      "return(",
      "<>",
      "<Routes>    ",
      "    {/* <Route exact path='/dashboard' element={ isLogged? <UserDashboard/>:<Navigate to='/login' replace /> } /> */}",
      "    {/* <Route exact path='/admin' element={isAdmin?<Admin/>:<Navigate to='/login' replace />}/> */}",
      "    {/* <Route exact path='/getuser/:id' element={<GetSpecificUserDetail/>} /> */}",
      "    {/* <Route path='/*' element={<LoginUser/>} /> */}",
      "",
      "</Routes>",
      "</>",
      "",
      ")",
      "}",
      "",
      "export default RoutesLink;"
    ]
  },
  "tailwindReactConfigData": [
    "    module.exports = {",
    "    content: [",
    "        './src/**/*.{js,jsx,ts,tsx}',",
    "    ],",
    "    theme: {",
    "        extend: {},",
    "    },",
    "    plugins: [],",
    "    }"
  ],
  "tailwindNextConfigData": [
    "    module.exports = {",
    "  content: [",
    "    './pages/**/*.{js,ts,jsx,tsx}',",
    "    './components/**/*.{js,ts,jsx,tsx}',",
    "  ],",
    "",
    "    theme: {",
    "        extend: {},",
    "    },",
    "    plugins: [],",
    "    }"
  ],
  "srcIndexCSSData": [
    "@tailwind base; @tailwind components; @tailwind utilities"
  ],
  "NextIndexData": [
    "export default function Home() {",
    "  return (",
    "    <h1 className='text-3xl font-bold underline'>",
    "      Hello world!",
    "    </h1>",
    "  )",
    "}"
  ],
  "NextAppData": [
    "import '../styles/globals.css'",
    "",
    "function MyApp({ Component, pageProps }) {",
    "  return <Component {...pageProps} />",
    "}",
    "",
    "export default MyApp"
  ],
  "NextHeadData": [
    "import Head from 'next/head'",
    "",
    "export default function Meta() {",
    "  return (",
    "    <Head>",
    "      <meta charSet='utf-8' />",
    "      <meta name='viewport' content='width=device-width, initial-scale=1' />",
    "      <meta name='theme-color' content='#000000' />",
    "      <link rel='icon' href='/favicon.ico' />",
    "      <title>Next.js + Tailwind CSS</title>",
    "    </Head>",
    "  )",
    "}"
  ],
  "storeIndex": [
    "import {createStore} from 'redux'",
    "import rootReducer from '../reducers'",
    "import thunk from 'redux-thunk'",
    "import {applyMiddleware, compose} from 'redux'",
    "",
    "const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;",
    "const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));",
    "export default store"
  ],
  "actionsTypesIndex": ["export const INCREMENT = 'INCREMENT'"],
  "actionsCreatorsIndex": [
    "import {INCREMENT} from '../types'",
    "",
    "export const addCounter = (increamentCount) => {",
    "  return {",
    "    type: INCREMENT,",
    "    payload: 1,",
    "  }",
    "}"
  ],

  "reduxReducersIndex": [
    "import { combineReducers } from 'redux'",
    "",
    "const rootReducer = combineReducers({",
    "  //reducer",
    "})",
    "",
    "export default rootReducer"
  ],
  "contextApiData": [
    "import React, { createContext, useContext, useReducer } from 'react'",
    "",
    "export const StateContext = createContext()",
    "",
    "export const StateProvider = ({children,store }) => {",
    "const {dispatch, getState} = store",
    " const value={dispatch,state:getState()}",
    "  return (",
    "  <StateContext.Provider value={value}>",
    "    {children}",
    "  </StateContext.Provider>",
    "  )",
    "}",
    "",
    "export const useStateValue = () => useContext(StateContext)"
  ],
  "callingContextApi": [
    "import React from 'react'",
    "import {useStateValue} from './StateProvider'",
    "",
    "function App() {",
    "  const { dispatch, state } = useStateValue()",
    "  return (",
    "    <div className='App'>",
    "      <h1>Hello World</h1>",
    "    </div>",
    "  )",
    "}",
    "",
    "export default App"
  ],
  "contextAPIData": [
    "import React, { createContext, useContext, useReducer } from 'react'",
    "",
    "export const StateContext = createContext()",
    "",
    "export const StateProvider = ({children,store }) => {",
    "const {dispatch, getState} = store",
    " const value={dispatch,state:getState()}",
    "  return (",
    "  <StateContext.Provider value={value}>",
    "    {children}",
    "  </StateContext.Provider>",
    "  )",
    "}",
    "",
    "export const useStateValue = () => useContext(StateContext)"
  ],
  "routesData": [
    "import { Route, Routes, Switch, Navigate } from 'react-router-dom';",
    "import { useState, useEffect, useRef } from 'react';",
    "import { useSelector, useDispatch } from 'react-redux';",
    "import { getAdmin, getUser } from '../redux/actions/authActions';",
    "import { getAdminSelector, getUserSelector } from '../redux/selectors/authSelector';",
    "import { getAdmin as getAdminFromLocalStorage, getUser as getUserFromLocalStorage } from '../utils/localStorage';",
    "",
    "import Login from '../pages/LoginUser';",
    "import UserDashboard from '../pages/UserDashboard';",
    "import Admin from '../pages/Admin';",
    "import GetSpecificUserDetail from '../pages/GetSpecificUserDetail';",
    "",
    "const RoutesLink = () => {",
    "  const dispatch = useDispatch();",
    "  const admin = useSelector(getAdminSelector);",
    "  const user = useSelector(getUserSelector);",
    "  const [isUserLoggedIn, setIsUserLoggedIn] = useState(false);",
    "  const [isAdminLoggedIn, setIsAdminLoggedIn] = useState(false);",
    "  const [isUserLoading, setIsUserLoading] = useState(true);",
    "  const [isAdminLoading, setIsAdminLoading] = useState(true);",
    "  const [isUserError, setIsUserError] = useState(false);",
    "  const [isAdminError, setIsAdminError] = useState(false);",
    "",
    "  const isMounted = useRef(true);",
    "",
    "  useEffect(() => {",
    "    const user = getUserFromLocalStorage();",
    "    const admin = getAdminFromLocalStorage();",
    "    if (user) {",
    "      dispatch(getUser(user));",
    "    }",
    "    if (admin) {",
    "      dispatch(getAdmin(admin));",
    "    }",
    "    setIsUserLoading(false);",
    "    setIsAdminLoading(false);",
    "    return () => {",
    "      isMounted.current = false;",
    "    };",
    "  }, []);",
    "",
    "  useEffect(() => {",
    "    if (isMounted.current) {",
    "      if (user) {",
    "        setIsUserLoggedIn(true);",
    "      } else {",
    "        setIsUserLoggedIn(false);",
    "      }",
    "      if (admin) {",
    "        setIsAdminLoggedIn(true);",
    "      } else {",
    "        setIsAdminLoggedIn(false);",
    "      }",
    "    }",
    "  }, [user, admin]);",
    "",
    "  return (",
    "    <Routes>",
    "      <Route path='/' element={<PrivateRoutes></PrivateRoutes>}></Route>",
    "      <Route path='/login' element={<></>}></Route>",
    "      <Route path='*' element={<Navigate to='/'></Navigate>}></Route>",
    "    </Routes>",
    "  );",
    "};",
    "",
    "const PrivateRoutes = () => {",
    "  const { user, admin } = useSelector((state) => state.auth);",
    "  return (",
    "    <Switch>",
    "      <Route path='/' element={<UserDashboard></UserDashboard>}></Route>",
    "      <Route path='/admin' element={<Admin></Admin>}></Route>",
    "      <Route path='/user/:id' element={<GetSpecificUserDetail></GetSpecificUserDetail>}></Route>",
    "      <Route path='*' element={<Navigate to='/'></Navigate>}></Route>",
    "    </Switch>",
    "  );",
    "};",
    "",
    "export default RoutesLink;"
  ],
  "importRoutesLink": [
    "import RoutesLink from './routes/RoutesLink';",
    "<RoutesLink/>"
  ],
  "apiIndexData": [
    "import login from './login';",
    "import register from './register';",
    "import getData from './getData';",
    "",
    "export {",
    "  login,",
    "register,",
    "getData",
    "};"
  ],
  "loginApiData": [
    "import axios from 'axios';",
    "const BASE_URL = process.env.REACT_APP_BASE_URL;",
    "",
    "const login = async (data) => {",
    "  try {",
    "    const response = await axios.post(`${BASE_URL}/login`, data);",
    "    return response.data;",
    "  } catch (error) {",
    "    return error.response.data;",
    "  }",
    "};",
    "",
    "export default login;"
  ],
  "registerApiData": [
    "import axios from 'axios';",
    "const BASE_URL = process.env.REACT_APP_BASE_URL;",
    "",
    "const register = async (data) => {",
    "  try {",
    "    const response = await axios.post(`${BASE_URL}/register`, data);",
    "    return response.data;",
    "  } catch (error) {",
    "    return error.response.data;",
    "  }",
    "};",
    "",
    "export default register;"
  ],
  "getApiData": [
    "import axios from 'axios';",
    "const BASE_URL = process.env.REACT_APP_BASE_URL;",
    "",
    "const getData = async (token) => {",
    "  try {",
    "    const response = await axios.get(`${BASE_URL}/getData`, {",
    "      headers: {",
    "        Authorization: `Bearer ${token}`",
    "      }",
    "    });",
    "    return response.data;",
    "  } catch (error) {",
    "    return error.response.data;",
    "  }",
    "};",
    "",
    "export default getData;"
  ],
  "postApiData": [
    "import axios from 'axios';",
    "const BASE_URL = process.env.REACT_APP_BASE_URL;",
    "",
    "const postData = async (data, token) => {",
    "  try {",
    "    const response = await axios.post(`${BASE_URL}/postData`, data, {",
    "      headers: {",
    "        Authorization: `Bearer ${token}`",
    "      }",
    "    });",
    "    return response.data;",
    "  } catch (error) {",
    "    return error.response.data;",
    "  }",
    "};",
    "",
    "export default postData;"
  ],
  "utilsIndexFileData": [
    "import { BASE_URL } from './constants';",
    "import { getUserFromLocalStorage,setTokenInLocalStorage,setUserInLocalStorage } from './localStorage';",
    "",
    "export { BASE_URL, getUserFromLocalStorage, setUserInLocalStorage, setTokenInLocalStorage };"
  ],
  "constantsFileData": [
    "export const BASE_URL = process.env.REACT_APP_BASE_URL;"
  ],
  "localStorageFileData": [
    "export const getUserFromLocalStorage = () => {",
    "  const user = localStorage.getItem('user');",
    "  if (user) {",
    "    return JSON.parse(user);",
    "  }",
    "  return null;",
    "};",
    "",
    "export const getTokenFromLocalStorage = () => {",
    "  const token = localStorage.getItem('token');",
    "  if (token) {",
    "    return JSON.parse(token);",
    "  }",
    "  return null;",
    "};",
    "",
    "export const setUserInLocalStorage = (user) => {",
    "  localStorage.setItem('user', JSON.stringify(user));",
    "};",
    "",
    "export const setTokenInLocalStorage = (token) => {",
    "  localStorage.setItem('token', JSON.stringify(token));",
    "};",
    "",
    "export const removeUserFromLocalStorage = () => {",
    "  localStorage.removeItem('user');",
    "};",
    "",
    "export const removeTokenFromLocalStorage = () => {",
    "  localStorage.removeItem('token');",
    "};"
  ],
  "envData": [
    "REACT_APP_BASE_URL=http://localhost:5000",
    "REACT_APP_GOOGLE_CLIENT_ID=1000000000000-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com",
    "REACT_APP_FACEBOOK_APP_ID=",
    "REACT_APP_GITHUB_CLIENT_ID=",
    "REACT_APP_TWITTER_CLIENT_ID=",
    "REACT_APP_LINKEDIN_CLIENT_ID=",
    "REACT_APP_INSTAGRAM_CLIENT_ID=",
    "REACT_APP_API_KEY=",
    "REACT_APP_AUTH_DOMAIN=",
    "REACT_APP_DATABASE_URL=",
    "REACT_APP_PROJECT_ID=",
    "REACT_APP_STORAGE_BUCKET=",
    "REACT_APP_MESSAGING_SENDER_ID=",
    "REACT_APP_APP_ID=",
    "REACT_APP_MEASUREMENT_ID="
  ]
}
